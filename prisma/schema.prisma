generator client {
    provider   = "prisma-client-js"
    engineType = "binary"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                 String    @id @default(cuid())
    userId             String    @map("user_id")
    providerType       String    @map("provider_type")
    providerId         String    @map("provider_id")
    providerAccountId  String    @map("provider_account_id")
    refreshToken       String?   @map("refresh_token")
    accessToken        String?   @map("access_token")
    accessTokenExpires DateTime? @map("access_token_expires")
    createdAt          DateTime  @default(now()) @map("created_at")
    updatedAt          DateTime  @updatedAt @map("updated_at")
    user               User      @relation(fields: [userId], references: [id])

    @@unique([providerId, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    userId       String   @map("user_id")
    expires      DateTime
    sessionToken String   @unique @map("session_token")
    accessToken  String   @unique @map("access_token")
    createdAt    DateTime @default(now()) @map("created_at")
    updatedAt    DateTime @updatedAt @map("updated_at")
    user         User     @relation(fields: [userId], references: [id])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    createdAt     DateTime  @default(now()) @map("created_at")
    updatedAt     DateTime  @updatedAt @map("updated_at")
    accounts      Account[]
    sessions      Session[]
}

model VerificationRequest {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")

    @@unique([identifier, token])
}
